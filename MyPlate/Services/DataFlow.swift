//
//  DataFlow.swift
//  MyPlate
//
//  Created by ùïÑùïíùï•ùïßùïñùï™ ‚Ñôùï†ùïïùïòùï†ùï£ùïüùïöùï™ on 02.07.2025.
//

import Foundation

class DataFlow {
    
    func loadHistoryArrFromFile() -> [UserHistory]? {
        let fileManager = FileManager.default
        guard let documentDirectory = fileManager.urls(for: .documentDirectory, in: .userDomainMask).first else {
            print("Unable to get document directory")
            return nil
        }
        let filePath = documentDirectory.appendingPathComponent("UserHistory.plist")
        do {
            let data = try Data(contentsOf: filePath)
            let arr = try JSONDecoder().decode([UserHistory].self, from: data)
            return arr
        } catch {
            print("Failed to load or decode athleteArr: \(error)")
            return nil
        }
    }
    
    private func saveArrToFile(data: Data) throws {
        let fileManager = FileManager.default
        if let documentDirectory = fileManager.urls(for: .documentDirectory, in: .userDomainMask).first {
            let filePath = documentDirectory.appendingPathComponent("UserHistory.plist")
            try data.write(to: filePath)
        } else {
            throw NSError(domain: "SaveError", code: 1, userInfo: [NSLocalizedDescriptionKey: "Unable to get document directory"])
        }
    }
    
    func saveArr(arr: [UserHistory]) {
        do {
            let data = try JSONEncoder().encode(arr) //—Ç—É—Ç –º–∫–∞—Å—Å–∏–≤ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –¥–∞—Ç—É
            try saveArrToFile(data: data)
        } catch {
            print("Failed to encode or save athleteArr: \(error)")
        }
    }
    
    // MARK: - UserProfile Persistence

    func loadUserProfileFromFile() -> UserProfile? {
        let fileManager = FileManager.default
        guard let documentDirectory = fileManager.urls(for: .documentDirectory, in: .userDomainMask).first else {
            print("Unable to get document directory")
            return nil
        }
        let filePath = documentDirectory.appendingPathComponent("UserProfile.plist")
        do {
            let data = try Data(contentsOf: filePath)
            let profile = try JSONDecoder().decode(UserProfile.self, from: data)
            return profile
        } catch {
            print("Failed to load or decode UserProfile: \(error)")
            return nil
        }
    }

    func saveUserProfileToFile(profile: UserProfile) {
        let fileManager = FileManager.default
        guard let documentDirectory = fileManager.urls(for: .documentDirectory, in: .userDomainMask).first else {
            print("Unable to get document directory")
            return
        }
        let filePath = documentDirectory.appendingPathComponent("UserProfile.plist")
        do {
            let data = try JSONEncoder().encode(profile)
            try data.write(to: filePath)
        } catch {
            print("Failed to encode or save UserProfile: \(error)")
        }
    }

}

// MARK: - –°—Ç—Ä–∏–∫ –¥–Ω–µ–π –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
extension DataFlow {
    /// –°—á–∏—Ç–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫ –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –≤ —Ä–∞–º–∫–∞—Ö —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—Å—Å–∏–≤–∞ UserHistory
    func currentWeekStreak(from history: [UserHistory]) -> Int {
        let calendar = Calendar.current
        let today = Date()
        
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
        guard let weekStart = calendar.dateInterval(of: .weekOfYear, for: today)?.start else {
            return 0
        }
        
        // –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º –¥–∞—Ç—ã –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ–ª—å–∫–æ –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
        let weekDates = history
            .map { $0.day }
            .filter { $0 >= weekStart && $0 <= today }
            .sorted(by: >) // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é: —Å–µ–≥–æ–¥–Ω—è –∏ –Ω–∞–∑–∞–¥
        
        var streak = 0
        var currentDate = today
        
        for date in weekDates {
            if calendar.isDate(date, inSameDayAs: currentDate) {
                streak += 1
                // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –¥–Ω—é
                guard let previousDay = calendar.date(byAdding: .day, value: -1, to: currentDate) else {
                    break
                }
                currentDate = previousDay
            } else if date < currentDate {
                // –ï—Å–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω –¥–µ–Ω—å ‚Äî –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø–æ–¥—Å—á—ë—Ç
                break
            }
        }
        
        return streak
    }
}

 
